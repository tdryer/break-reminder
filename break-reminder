#!/usr/bin/env python3

"""A break reminder daemon for GNOME."""

import argparse
import datetime
import functools
import logging
import re
import sys

import gi

gi.require_version("Notify", "0.7")
gi.require_version("GnomeDesktop", "3.0")
from gi.repository import GLib, GnomeDesktop, Notify

LOGGER = logging.getLogger(__name__)

NOTIFY_CLOSED_REASON_DISMISSED = 2


def callback(func):
    """Wrap callback to exit if there is an unhandled exception."""

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except Exception:
            LOGGER.exception("Callback raised unhandled exception")
            sys.exit(1)

    return wrapper


class Timer:
    """Timer interface for `GLib.timeout_add`."""

    def __init__(self, callback_):
        self._callback = callback_
        self._source = None

    def start(self, duration):
        """Start timer."""
        LOGGER.debug("Starting timer for %s", duration)
        assert self._source is None
        self._source = GLib.timeout_add(
            duration / datetime.timedelta(milliseconds=1), self._on_timeout_expiry
        )

    def stop(self):
        """Stop timer."""
        LOGGER.debug("Stopping timer")
        if self._source is not None:
            GLib.Source.remove(self._source)
            self._source = None

    @callback
    def _on_timeout_expiry(self):
        LOGGER.debug("Timer expired")
        self._source = None
        self._callback()
        return False


class BreakReminder:
    def __init__(
        self,
        idle_monitor,
        break_duration,
        work_duration,
        postpone_duration,
    ):
        self._idle_monitor = idle_monitor
        self._break_duration = break_duration
        self._work_duration = work_duration
        self._postpone_duration = postpone_duration
        self._timer = Timer(self._on_timer_expired)

        notification = Notify.Notification.new("Break Time")
        # Keep notification on screen until dismissed.
        notification.set_urgency(Notify.Urgency.CRITICAL)
        # Do not automatically close notification after action is invoked since
        # this can't be distinguished from the user dismissing the
        # notification.
        notification.set_hint("resident", GLib.Variant.new_boolean(True))
        notification.connect("closed", self._on_notification_closed)
        notification.add_action("postpone", "Postpone", self._on_notification_action)
        notification.add_action("skip", "Skip", self._on_notification_action)
        self._notification = notification

    def __enter__(self):
        self._timer.start(self._work_duration)
        self._idle_monitor.add_idle_watch(
            self._break_duration / datetime.timedelta(milliseconds=1),
            self._on_idle_start,
        )

    def __exit__(self, exc_type, exc_value, traceback):
        self._notification.close()

    @callback
    def _on_timer_expired(self):
        """Callback when timer expires."""
        LOGGER.info("Showing break notification")
        self._notification.show()

    @callback
    def _on_idle_start(self, idle_monitor, _watch_id):
        """Callback when idle is started."""
        LOGGER.info("User has been idle for break duration")
        self._notification.close()
        self._timer.stop()
        idle_monitor.add_user_active_watch(self._on_idle_end)

    @callback
    def _on_idle_end(self, _idle_monitor, _watch_id):
        """Callback when idle is ended."""
        LOGGER.info("User is no longer idle")
        self._timer.start(self._work_duration)

    @callback
    def _on_notification_closed(self, notification):
        """Callback when notification is closed."""
        # Ignore when notification is closed programmatically
        if notification.get_closed_reason() != NOTIFY_CLOSED_REASON_DISMISSED:
            return
        LOGGER.info("Notification closed")
        self._timer.start(self._postpone_duration)

    @callback
    def _on_notification_action(self, notification, action):
        LOGGER.info("Notification %s action selected", action)
        notification.close()
        self._timer.start(
            {
                "postpone": self._postpone_duration,
                "skip": self._work_duration,
            }[action]
        )


DURATION_PATTERN = re.compile(r"(?P<number>[1-9]\d*)(?P<unit>[smh]{0,1})")
DURATION_UNIT = {
    "s": "seconds",
    "m": "minutes",
    "h": "hours",
}


class InvalidDuration(argparse.ArgumentTypeError):
    def __str__(self):
        return f"invalid duration value: {self.args[0]!r}"


def parse_duration(string):
    """Parse a duration string."""
    match = DURATION_PATTERN.fullmatch(string)
    if not match:
        raise InvalidDuration(string)
    number = int(match.group("number"))
    unit_char = match.group("unit") or "m"
    return datetime.timedelta(**{DURATION_UNIT[unit_char]: number})


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="Break reminder daemon for GNOME.",
        epilog=(
            """
            Specify durations as a number followed by a unit. Valid units are
            `s` for seconds, `m` for minutes, and `h` for hours`. Assumes
            minutes if unit is not specified.
            """
        ),
    )
    parser.add_argument(
        "--break-duration",
        type=parse_duration,
        default="5m",
        help="Break duration",
    )
    parser.add_argument(
        "--work-duration",
        type=parse_duration,
        default="55m",
        help="Work duration",
    )
    parser.add_argument(
        "--postpone-duration",
        type=parse_duration,
        default="5m",
        help="Postpone duration",
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Enable debug logging",
    )
    args = parser.parse_args()

    logging.basicConfig(
        format="%(asctime)s %(levelname)-8s %(message)s",
        level=logging.DEBUG if args.debug else logging.INFO,
    )

    if not Notify.init("Break Reminder"):
        sys.exit("Failed to initialize notifier")

    idle_monitor = GnomeDesktop.IdleMonitor()
    if not idle_monitor.init():
        sys.exit("Failed to initialize idle monitor")

    LOGGER.info("Starting break reminder")

    with BreakReminder(
        idle_monitor,
        args.break_duration,
        args.work_duration,
        args.postpone_duration,
    ):
        try:
            GLib.MainLoop().run()
        except KeyboardInterrupt:
            LOGGER.info("Caught SIGINT")


if __name__ == "__main__":
    main()
